apiVersion: v1
kind: Namespace
metadata:
  name: ai-artworks
  labels:
    name: ai-artworks
    environment: production

---
# PostgreSQL Database
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: ai-artworks
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: ai-artworks
type: Opaque
data:
  postgres-user: YWlhcnR3b3Jrcw==  # aiartworks
  postgres-password: c3VwZXJzZWN1cmVwYXNzd29yZA==  # supersecurepassword

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: ai-artworks
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        - name: POSTGRES_DB
          value: aiartworks
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: ai-artworks
spec:
  ports:
  - port: 5432
  selector:
    app: postgres
  clusterIP: None

---
# Redis Cache
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: ai-artworks
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command:
          - redis-server
          - --requirepass
          - $(REDIS_PASSWORD)
          - --maxmemory
          - 2gb
          - --maxmemory-policy
          - allkeys-lru
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "1"

---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: ai-artworks
type: Opaque
data:
  password: cmVkaXNzdXBlcnNlY3VyZXBhc3M=  # redissupersecurepass

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: ai-artworks
spec:
  ports:
  - port: 6379
  selector:
    app: redis

---
# Neo4j Graph Database
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: neo4j
  namespace: ai-artworks
spec:
  serviceName: neo4j
  replicas: 1
  selector:
    matchLabels:
      app: neo4j
  template:
    metadata:
      labels:
        app: neo4j
    spec:
      containers:
      - name: neo4j
        image: neo4j:5-enterprise
        ports:
        - containerPort: 7474
        - containerPort: 7687
        env:
        - name: NEO4J_AUTH
          value: neo4j/supersecurepass
        - name: NEO4J_ACCEPT_LICENSE_AGREEMENT
          value: "yes"
        - name: NEO4J_dbms_memory_heap_initial__size
          value: "2G"
        - name: NEO4J_dbms_memory_heap_max__size
          value: "4G"
        volumeMounts:
        - name: neo4j-data
          mountPath: /data
        resources:
          requests:
            memory: "4Gi"
            cpu: "1"
          limits:
            memory: "8Gi"
            cpu: "2"
  volumeClaimTemplates:
  - metadata:
      name: neo4j-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 50Gi

---
apiVersion: v1
kind: Service
metadata:
  name: neo4j
  namespace: ai-artworks
spec:
  ports:
  - port: 7474
    name: http
  - port: 7687
    name: bolt
  selector:
    app: neo4j

---
# Athena Orchestrator
apiVersion: apps/v1
kind: Deployment
metadata:
  name: athena-orchestrator
  namespace: ai-artworks
spec:
  replicas: 1
  selector:
    matchLabels:
      app: athena
  template:
    metadata:
      labels:
        app: athena
    spec:
      containers:
      - name: athena
        image: aiartworks/athena:latest
        env:
        - name: DATABASE_URL
          value: postgresql://aiartworks:supersecurepassword@postgres:5432/aiartworks
        - name: REDIS_URL
          value: redis://:redissupersecurepass@redis:6379
        - name: NEO4J_URI
          value: bolt://neo4j:7687
        - name: NEO4J_USER
          value: neo4j
        - name: NEO4J_PASSWORD
          value: supersecurepass
        ports:
        - containerPort: 8000
        resources:
          requests:
            memory: "4Gi"
            cpu: "2"
          limits:
            memory: "8Gi"
            cpu: "4"

---
# RenderOps Agent with GPU
apiVersion: apps/v1
kind: Deployment
metadata:
  name: renderops-agent
  namespace: ai-artworks
spec:
  replicas: 2
  selector:
    matchLabels:
      app: renderops
  template:
    metadata:
      labels:
        app: renderops
    spec:
      nodeSelector:
        accelerator: nvidia-tesla-a100
      containers:
      - name: renderops
        image: aiartworks/renderops:latest
        env:
        - name: AGENT_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: ATHENA_URL
          value: http://athena-service:8000
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        resources:
          requests:
            memory: "16Gi"
            cpu: "4"
            nvidia.com/gpu: 1
          limits:
            memory: "32Gi"
            cpu: "8"
            nvidia.com/gpu: 1

---
# DataDaemon Agent
apiVersion: apps/v1
kind: Deployment
metadata:
  name: datadaemon-agent
  namespace: ai-artworks
spec:
  replicas: 3
  selector:
    matchLabels:
      app: datadaemon
  template:
    metadata:
      labels:
        app: datadaemon
    spec:
      containers:
      - name: datadaemon
        image: aiartworks/datadaemon:latest
        env:
        - name: AGENT_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: ATHENA_URL
          value: http://athena-service:8000
        - name: INFLUXDB_URL
          value: http://influxdb:8086
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"

---
# SecSentinel Agent
apiVersion: apps/v1
kind: Deployment
metadata:
  name: secsent